extends c

snippet copy "Copyright message" !b
/* Copyright (c) `!v strftime("%Y")` Richard Russon (FlatCap)
 *
 * This file is part of ${1:DParted}.
 *
 * $1 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * $1 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with $1.  If not, see <http://www.gnu.org/licenses/>.
 */


endsnippet

snippet fora "for auto loop"
for (auto ${1:i} : ${2:list}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class"
class ${1:`!p snip.rv = snip.basename.capitalize() or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

protected:
	${0:/* data */}
};
endsnippet

snippet vec "std::vector"
std::vector<${1:std::string}> $0
endsnippet

# snippet s "std::string"
# std::string$0
# endsnippet

snippet v "std::vector"
std::vector<$1> $0
endsnippet

snippet m "std::map"
std::map<$1,$2> $0
endsnippet

snippet "(^|[^:])(string)" "desc" r
`!p snip.rv = match.group(1)+"std::"+match.group(2)`
endsnippet

snippet "([uis])([0-9]+)" "std int types" r
`!p snip.rv = "std::"
if match.group(1) == "u": snip.rv += "u"
snip.rv += "int"+match.group(2)+"_t"`
endsnippet

snippet "(array|bitset|deque|forward_list|list|multiset|priority_queue|queue|set|stack|unordered_multiset|unordered_set|vector)" "single item containers" r
`!p snip.rv = "std::"+match.group(1)`<${2:std::string}> $0
endsnippet

snippet "(map|multimap|pair|unordered_map|unordered_multimap)" "double item containers" r
`!p snip.rv = "std::"+match.group(1)`<${2:std::string},${3:std::string}> $0
endsnippet

snippet tuple "triple item containers"
std::tuple<$2,$3,$4> $0
endsnippet

# std::string               616	s
# std::vector               248   v
# std::runtime_error        95    runtime_error
# std::dynamic_pointer_cast 83    dcast
# std::shared_ptr           64    shared
# std::end                  45    end
# std::string::npos         40    npos
# std::begin                39    begin
# std::to_string            28    to_string
# std::map                  27    m
# std::bind                 26    bind
# std::stringstream         24    ss
# std::set                  16    set
# std::function             16    fn
# std::ostream              14    os
# std::weak_ptr             8     weak
# std::multimap             7     mm
# std::make_pair            7     make_pair
# std::max                  6     max
# std::setw                 5     setw
# std::setfill              5     setfill
# std::hex                  5     hex
# std::pair                 4     pair
# std::transform            3     transform
# std::swap                 3     swap
# std::sort                 2     sort
# std::make_shared          2     make_shared
# std::deque                2     deque
# std::tie                  1     tie
# std::stack                1     stack
# std::size_t               1     size_t
# std::min                  1     min

