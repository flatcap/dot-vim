extends c

snippet copy "Copyright message" !b
/* Copyright (c) `!v strftime("%Y")` Richard Russon (FlatCap)
 *
 * This file is part of ${1:DParted}.
 *
 * $1 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * $1 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with $1.  If not, see <http://www.gnu.org/licenses/>.
 */


endsnippet

snippet fora "for auto loop"
for (auto ${1:i} : ${2:list}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class"
class ${1:`!p snip.rv = snip.basename.capitalize() or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

protected:
	${0:/* data */}
};
endsnippet

snippet v "std::vector"
std::vector<${1:std::string}> $0
endsnippet

snippet m "std::map"
std::map<${1:std::string},${2:std::string}> $0
endsnippet

snippet s "std::string"
std::string$0
endsnippet

snippet c "std::cout"
std::cout$0
endsnippet

snippet npos "std::string::npos"
std::string::npos$0
endsnippet

snippet "(^|[^:_])\b(string|cout|cerr|endl|e|size_t|runtime_error|dynamic_pointer_cast|bind|stringstream|function|ostream|make_pair|setw|setfill|hex|transform|swap|sort|make_shared|tie)" "desc" r
`!p snip.rv = match.group(1)+"std::"+match.group(2)
if match.group(2) == "e": snip.rv += "ndl"`
endsnippet

snippet "([uis])([0-9]+)" "std int types" r
`!p snip.rv = "std::"
if match.group(1) == "u": snip.rv += "u"
snip.rv += "int"+match.group(2)+"_t"`
endsnippet

snippet "(end|begin|to_string|max|min)" "single item brackers" r
`!p snip.rv = "std::"+match.group(1)` ($2) $0
endsnippet

snippet "(array|bitset|deque|forward_list|list|multiset|priority_queue|queue|set|stack|unordered_multiset|unordered_set|vector)" "single item containers" r
`!p snip.rv = "std::"+match.group(1)`<${2:std::string}> $0
endsnippet

snippet "(shared|weak|unique|uniq)" "single item containers" r
`!p snip.rv = "std::"+match.group(1)
if match.group(1) == "uniq": snip.rv += "ue"
snip.rv += "_ptr"`<$2> $0
endsnippet

snippet "(map|multimap|pair|unordered_map|unordered_multimap)" "double item containers" r
`!p snip.rv = "std::"+match.group(1)`<${2:std::string},${3:std::string}> $0
endsnippet

snippet tuple "triple item containers"
std::tuple<$2,$3,$4> $0
endsnippet

